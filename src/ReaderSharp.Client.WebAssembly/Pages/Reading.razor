@page "/reading"
@using MudBlazor.Services
@using ReaderSharp.Client.WebAssembly.Models
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<MudContainer Class="d-flex flex-row px-0 reader-sharp-readingContainer">
    <CascadingValue Value="this" Name="Reading">
        @if (!IsMobile)
        {
            <ReadingToolBar />
        }
        <MudDrawer @bind-Open="_settingPanelOpen" Elevation="1" Anchor="Anchor.Bottom" Variant="DrawerVariant.Temporary" Class="reader-sharp-readingSetting">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">页面设置</MudText>
            </MudDrawerHeader>
            <ReadingPageSetting ReadingSettings="ReadingSettings" />
        </MudDrawer>
        <TextComponent ReadingSettings="ReadingSettings" />
    </CascadingValue>
</MudContainer>

@code
{

    [Inject] IResizeService ResizeService { get; set; }

    private Guid _subscriptionId;

    public ReadingSettings ReadingSettings;

    #region 设置面板显示控制

    private bool _settingPanelOpen = false;
    public void HideSettingPanel()
    {
        _settingPanelOpen = false;
        StateHasChanged();
    }

    public void ShowSettingPanel()
    {
        _settingPanelOpen = true;
        StateHasChanged();
    }

    private void ChangeSettingPanelStatus()
    {
        if (_settingPanelOpen)
        {
            HideSettingPanel();
        }
        else
        {
            ShowSettingPanel();
        }
    }

    #endregion 设置面板显示控制

    public bool IsMobile { get; set; }

    public AvailableSize BodySize { get; set; }

    private AvailableSizePX _availableSizePx = null;
    public AvailableSizePX AvailableSizePx
    {
        get
        {
            if (_availableSizePx == null)
            {
                return new AvailableSizePX
                    {
                        Width = "1800px",
                        Height = "800px"
                    };
            }
            else
            {
                return _availableSizePx;
            }
        }
        set
        {
            _availableSizePx = value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _subscriptionId = await ResizeService.Subscribe(async (size) =>
            {
                BodySize = new AvailableSize
                    {
                        Width = size.Width,
                        Height = size.Height
                    };
                AvailableSizePx = new AvailableSizePX
                    {
                        Width = BodySize.Width + "px",
                        Height = BodySize.Height + "px"
                    };
                IsMobile = await JsRuntime.InvokeAsync<bool>("isDevice");
                _settingPanelOpen = false;
                await InvokeAsync(StateHasChanged);
            }, new ResizeOptions
                {
                    ReportRate = 50,
                    NotifyOnBreakpointOnly = false,
                });

            var size = await ResizeService.GetBrowserWindowSize();
            BodySize = new AvailableSize
                {
                    Width = size.Width,
                    Height = size.Height
                };
            AvailableSizePx = new AvailableSizePX
                {
                    Width = BodySize.Width + "px",
                    Height = BodySize.Height + "px"
                };
            IsMobile = await JsRuntime.InvokeAsync<bool>("isDevice");
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        ReadingSettings = new ReadingSettings();
        var fonts = await JsRuntime.InvokeAsync<List<FontInfo>>("getAvailableFonts");
        ReadingSettings.AvailableFonts.AddRange(fonts);
        var defaultFont = new FontInfo
            {
                ZH = "系统默认",
                EN = await JsRuntime.InvokeAsync<string>("getDefaultFont")
            };
        ReadingSettings.AvailableFonts.Add(defaultFont);
        ReadingSettings.Font = defaultFont;
        await base.OnParametersSetAsync();
    }

    public async ValueTask DisposeAsync() => await ResizeService.Unsubscribe(_subscriptionId);
}

<style>
    .reader-sharp-readingContainer {
        height: @AvailableSizePx.Height;
        overflow: hidden;
        box-sizing: border-box;
    }

    .reader-sharp-readingSetting {
        max-height: 75%;
    }
</style>