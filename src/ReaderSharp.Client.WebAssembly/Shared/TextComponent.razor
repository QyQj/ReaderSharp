@using ReaderSharp.Client.WebAssembly.Models
@using System.Runtime.CompilerServices
@inject IJSRuntime JsRuntime

<MudContainer Class="d-flex flex-column reader-sharp-textContainer">
    <MudDrawer @bind-Open="_settingPanelOpen" Elevation="1" Anchor="Anchor.Bottom" Variant="DrawerVariant.Temporary" Class="reader-sharp-readingSetting">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">页面设置</MudText>
        </MudDrawerHeader>
        <ReadingPageSetting Component="this" />
    </MudDrawer>
    <MudButton OnClick="ChangeSettingPanelStatus">设置</MudButton>
    @for (int i = 0; i < ParagraphList.Count; i++)
    {
        <p class="reader-sharp-paragraph">@ParagraphList[i]</p>
    }
</MudContainer>

@code
{
    public List<string> ParagraphList = new List<string>
    {
        "蓝星2081年7月2日13:50，夏国最繁华城市‘滨海市’，此时乌云密布，雷声轰隆，眼看着一场暴雨要来。",
        "“夏天的雷阵雨，说来就来。”星空格斗馆顶层的一个房间，一名年轻人正透过落地窗看着外面的乌云闪电，“噼里啪啦”开始有雨滴拍打在窗户玻璃上。",
        "年轻人走到房间中央，双手撑地，很缓慢也很稳地进行倒立。先是双手直倒立，后收起了一只手，变成了右手的单手倒立。",
        "“呼~~~吸~~~”",
        "呼吸声在耳边响起，许景明感觉着身体核心肌肉群收紧，也感受着全身重量对右臂的刺激。",
        "前三分钟手臂很舒服，手臂的筋骨肌肉被深层次刺激着，但第四分钟手掌肌肉就有些抽痛有些煎熬了，第五分钟更是痛苦，但许景明早就习惯了，坚持完五分钟，自然而然换成了左手单手倒立。",
        "“老爸的腰，不知道今天有没有好点。”单手倒立时，许景明思绪也在飘着，他想到了父亲。父亲今年六十，腰伤是老毛病了，昨天听老妈电话里说父亲搬重物时腰伤又发了……",
        "“等忙完最近这一阵，回老家一趟。”许景明想着。",
        "单手倒立，不是国家队教的训练方法，而是小时候父亲教的。",
        "许景明小时候身体不好，父亲教他武术强身健体，其中就有“单臂倒立桩”。因为长期练习效果挺好，也成了他每日练的五大桩功之一，冬练三九，夏练三伏，练习至今已有二十年，即便生病受伤也会坚持，没太特殊原因是不会断的。俗话说‘练拳不练功，到老一场空’，这所谓的功，就是日常基本功。",
        "有个三五天中断，筋骨肌肉等各方面就会下滑。",
        "单臂倒立桩练完后，许景明走到书桌旁坐了下来，喝了几口水，看着窗户外的暴雨。",
        "“湿气一重，我这腿就开始疼了。”许景明看向自己的右腿，伸手轻轻揉了揉，“每天康复性锻炼从来没停过，但我的右腿……好不了了。”",
        "“如果右腿没伤，我应该有望冲击世界第一吧。”许景明默默道。",
        "伤病是每个武道高手职业生涯最怕遇到的。“断腿”之伤，对许景明而言，那就是一场噩梦。",
        "“滴滴滴……”忽然有声响响起。",
        "许景明抬起头，开口道：“小白，接视频电话。”",
        "有光线在许景明前方凝聚，汇聚成两米高的画面，画面中一名魁梧大胖子正坐在车上，笑着喊道：“老许，我们已经从酒店出发了，估计20分钟左右就能抵达你们星空格斗馆。哈哈，我们一年多没见了吧，今晚可得好好喝一杯。”",
        "“放心吧，大熊，我早就定好了一家烤肉餐厅。”许景明看到少年时的好友，笑着嘱托道，“雨下得挺大，你们路上小心点。”",
        "“放心放心。”魁梧大胖子接着道，“省集训队这群小子都很崇拜你，想要见识见识你的枪法呢，等会儿你可得好好指点指点他们，让他们明白和世界顶级高手的差距。”",
        "“现在年轻人是一代比一代厉害，我不翻船就不错了。”许景明笑呵呵道。",
        "“怎么可能翻船？我倒是希望你能翻船，你翻船了，代表我们省队又出了一个天才啊。”大胖子哈哈笑道，“好了，不闲聊了，我们待会儿见。”",
        "“待会见。”许景明伸手一划，半空中的画面散去。",
        "为江南省集训队进行培训，为期十天，收取费用五万蓝星币，实际上这点钱连场地费都不够。但对格斗馆而言，能够为省集训队做培训，也是广告招牌，也能吸引更多格斗爱好者们来格斗馆办会员。",
        "“职业选手退役，也得赚钱啊。”许景明起身，去洗澡换衣服了。",
        "格斗职业选手听起来风光，但实际上也就巅峰时赚些‘出场费’，职业生涯收入过亿的，全世界都少得可怜，大多数职业选手也就一个温饱。",
        "至于退役之后，赚钱就更难。许景明虽然也是世界级武道高手，但世界武道大赛，他最高也只是八强罢了。格斗界收入是成金字塔形的，塔尖的是极少极少数！排名第一的收入高得夸张，第二第三第四……会直线下滑。"
    };

    #region 设置面板控制

    private bool _settingPanelOpen = false;
    public void HideSettingPanel()
    {
        _settingPanelOpen = false;
        StateHasChanged();
    }

    public void ShowSettingPanel()
    {
        _settingPanelOpen = true;
        StateHasChanged();
    }

    private void ChangeSettingPanelStatus()
    {
        if (_settingPanelOpen)
        {
            HideSettingPanel();
        }
        else
        {
            ShowSettingPanel();
        }
    }

    #endregion

    #region 页面设置属性

    public string FontFamily { get; set; } = "SimSun";

    private string _backgroundColor = "#FFFFFF";

    public string BackgroundColor
    {
        get => _backgroundColor;
        set
        {
            _backgroundColor = value;
            StateHasChanged();
        }
    }

    private string _fontSizePX = "16px";
    private double _fontSize = 16;
    public double FontSize
    {
        get => _fontSize;
        set
        {
            _fontSize = value;
            _fontSizePX = value + "px";
            StateHasChanged();
        }
    }

    private int _fontWeight = 100;
    public int FontWeight
    {
        get => _fontWeight;
        set
        {
            _fontWeight = value;
            StateHasChanged();
        }
    }

    private double _lineHeight = 2;
    public double LineHeight
    {
        get => _lineHeight;
        set
        {
            _lineHeight = value;
            StateHasChanged();
        }
    }

    private string _paragraphTopMarginPX = "8px";
    private double _paragraphTopMargin = 8;
    public double ParagraphTopMargin
    {
        get => _paragraphTopMargin;
        set
        {
            _paragraphTopMargin = value;
            _paragraphTopMarginPX = value + "px";
            StateHasChanged();
        }
    }

    private string _paragraphBottomMarginPX = "8px";
    private double _paragraphBottomMargin = 8;
    public double ParagraphBottomMargin
    {
        get => _paragraphBottomMargin;
        set
        {
            _paragraphBottomMargin = value;
            _paragraphBottomMarginPX = value + "px";
            StateHasChanged();
        }
    }

    private string _textIndentEM = "2em";
    private int _textIndent = 2;
    public int TextIndent
    {
        get => _textIndent;
        set
        {
            _textIndent = value;
            _textIndentEM = value + "em";
            StateHasChanged();
        }
    }

    private string _containerWidthPX = "1000px";
    private int _containerWidth = 1000;
    public int ContainerWidth
    {
        get => _containerWidth;
        set
        {
            _containerWidth = value;
            _containerWidthPX = value + "px";
            StateHasChanged();
        }
    }

    private string _textComponentLeftPaddingPX = "8px";
    private double _textComponentLeftPadding = 8;
    public double TextComponentLeftPadding
    {
        get => _textComponentLeftPadding;
        set
        {
            _textComponentLeftPadding = value;
            _textComponentLeftPaddingPX = value + "px";
            StateHasChanged();
        }
    }

    private string _textComponentRightPaddingPX = "8px";
    private double _textComponentRightPadding = 8;
    public double TextComponentRightPadding
    {
        get => _textComponentRightPadding;
        set
        {
            _textComponentRightPadding = value;
            _textComponentRightPaddingPX = value + "px";
            StateHasChanged();
        }
    }

    #endregion

    public BodySize BodySize { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        BodySize = await JsRuntime.InvokeAsync<BodySize>("getBodySize");
    }
}

<style>
    .reader-sharp-paragraph {
        font-family: @FontFamily;
        font-size: @_fontSizePX;
        font-weight: @FontWeight;
        line-height: @LineHeight;
        margin-top: @_paragraphTopMarginPX;
        margin-bottom: @_paragraphTopMarginPX;
        text-indent: @_textIndentEM;
    }

    .reader-sharp-textContainer {
        width: @_containerWidthPX;
        padding-left: @_textComponentLeftPaddingPX;
        padding-right: @_textComponentRightPaddingPX;
        background: @_backgroundColor;
        border-left-width: 1px;
        border-right-width: 1px;
        border-style: solid;
        border-color: black;
    }

    .reader-sharp-readingSetting {
        max-height: 75%;
    }
</style>