// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReaderSharp.Data;

#nullable disable

namespace ReaderSharp.Migrations
{
    [DbContext(typeof(LiteDbContext))]
    [Migration("20220506051852_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("ReaderSharp.Models.Entities.Book", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("BLOB");

                    b.Property<string>("SourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.BookChapter", b =>
                {
                    b.Property<string>("ChapterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CatalogIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChapterName")
                        .HasColumnType("TEXT");

                    b.HasKey("ChapterId");

                    b.HasIndex("BookId");

                    b.ToTable("BookChapter");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.BookParagraph", b =>
                {
                    b.Property<string>("ParagraphId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChapterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.HasKey("ParagraphId");

                    b.HasIndex("BookId");

                    b.HasIndex("ChapterId");

                    b.ToTable("BookParagraph");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.BookSource", b =>
                {
                    b.Property<string>("BookSourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookSourceName")
                        .HasColumnType("TEXT");

                    b.Property<int>("BookSourceType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookSourceId");

                    b.ToTable("BookSource");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceBookInfoRule", b =>
                {
                    b.Property<string>("BookInfoRuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookSourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastChapter")
                        .HasColumnType("TEXT");

                    b.HasKey("BookInfoRuleId");

                    b.HasIndex("BookSourceId");

                    b.ToTable("SourceBookInfoRules");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceCatalogRule", b =>
                {
                    b.Property<string>("CatalogRuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookSourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChapterList")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChapterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChapterUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IsVip")
                        .HasColumnType("TEXT");

                    b.Property<string>("NextCatalogUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("CatalogRuleId");

                    b.HasIndex("BookSourceId");

                    b.ToTable("SourceCatalogRules");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceContentRule", b =>
                {
                    b.Property<string>("ContentRuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookSourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("NextContent")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentRuleId");

                    b.HasIndex("BookSourceId");

                    b.ToTable("SourceContentRules");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceSearchRule", b =>
                {
                    b.Property<string>("SearchRuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookList")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookSourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastChapter")
                        .HasColumnType("TEXT");

                    b.Property<string>("WordCount")
                        .HasColumnType("TEXT");

                    b.HasKey("SearchRuleId");

                    b.HasIndex("BookSourceId");

                    b.ToTable("SourceSearchRule");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.BookChapter", b =>
                {
                    b.HasOne("ReaderSharp.Models.Entities.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.BookParagraph", b =>
                {
                    b.HasOne("ReaderSharp.Models.Entities.Book", "Book")
                        .WithMany("Paragraphs")
                        .HasForeignKey("BookId");

                    b.HasOne("ReaderSharp.Models.Entities.BookChapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.Navigation("Book");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceBookInfoRule", b =>
                {
                    b.HasOne("ReaderSharp.Models.Entities.BookSource", "BookSource")
                        .WithMany("BookInfoRules")
                        .HasForeignKey("BookSourceId");

                    b.Navigation("BookSource");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceCatalogRule", b =>
                {
                    b.HasOne("ReaderSharp.Models.Entities.BookSource", "BookSource")
                        .WithMany("CatalogRules")
                        .HasForeignKey("BookSourceId");

                    b.Navigation("BookSource");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceContentRule", b =>
                {
                    b.HasOne("ReaderSharp.Models.Entities.BookSource", "BookSource")
                        .WithMany("ContentRules")
                        .HasForeignKey("BookSourceId");

                    b.Navigation("BookSource");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.SourceSearchRule", b =>
                {
                    b.HasOne("ReaderSharp.Models.Entities.BookSource", "BookSource")
                        .WithMany("SearchRules")
                        .HasForeignKey("BookSourceId");

                    b.Navigation("BookSource");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.Book", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("ReaderSharp.Models.Entities.BookSource", b =>
                {
                    b.Navigation("BookInfoRules");

                    b.Navigation("CatalogRules");

                    b.Navigation("ContentRules");

                    b.Navigation("SearchRules");
                });
#pragma warning restore 612, 618
        }
    }
}
